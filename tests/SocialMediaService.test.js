import { describe, it, beforeEach, afterEach } from 'node:test';
import assert from 'node:assert';
import { SocialMediaService } from '../lib/core/SocialMediaService.js';
import { TestUtils } from './setup.js';

// Mock spawn to avoid actual claude CLI calls
const originalSpawn = await import('child_process').spawn;

describe('SocialMediaService', () => {
  
  beforeEach(() => {
    // Mock spawn for claude command
    const mockSpawn = () => ({
      stdout: { on: (event, callback) => callback('ðŸš¨ Breaking: Test hook generated by AI') },
      stderr: { on: () => {} },
      on: (event, callback) => {
        if (event === 'close') callback(0);
      }
    });
  });

  it('should optimize hooks for different platforms', () => {
    const baseHook = 'ðŸš¨ Breaking: Major crypto development changes everything in finance!';
    
    const twitterHook = SocialMediaService.optimizeForPlatform(baseHook, 'twitter', 'en-US', 'daily-news');
    const linkedinHook = SocialMediaService.optimizeForPlatform(baseHook, 'linkedin', 'en-US', 'daily-news');
    const facebookHook = SocialMediaService.optimizeForPlatform(baseHook, 'facebook', 'en-US', 'daily-news');

    // Twitter should add hashtags and stay under 280 chars
    assert(twitterHook.includes('#'));
    assert(twitterHook.length <= 280);

    // LinkedIn should remove emojis and be more professional
    assert(!linkedinHook.includes('ðŸš¨'));
    assert(linkedinHook.includes('#'));

    // Facebook should be conversational
    assert(facebookHook.includes('?') || facebookHook.includes('What do you think'));
  });

  it('should build proper prompts for claude', () => {
    const content = 'Bitcoin price reaches new highs as institutional adoption accelerates.';
    const title = 'Bitcoin Institutional Adoption';
    const language = 'en-US';
    const category = 'daily-news';

    const prompt = SocialMediaService.buildPrompt(content, title, language, category);

    assert(prompt.includes(content));
    assert(prompt.includes(title));
    assert(prompt.includes(language));
    assert(prompt.includes(category));
    assert(prompt.includes('hook'));
    assert(prompt.includes('200 characters'));
  });

  it('should generate fallback hooks when claude unavailable', () => {
    const content = 'Bitcoin reaches $100,000 as government adoption accelerates globally.';
    const title = 'Bitcoin Government Adoption';
    const language = 'en-US';
    const category = 'daily-news';

    const fallbackHook = SocialMediaService.generateFallbackHook(content, title, language, category);

    assert(typeof fallbackHook === 'string');
    assert(fallbackHook.length > 10);
    assert(fallbackHook.length < 200);
    assert(fallbackHook.includes('Bitcoin') || fallbackHook.includes('government'));
  });

  it('should respect language platform preferences', () => {
    const enPlatforms = ['twitter', 'linkedin', 'facebook', 'instagram'];
    const jaPlatforms = ['twitter', 'facebook'];

    // This would test the configuration
    assert(Array.isArray(enPlatforms));
    assert(Array.isArray(jaPlatforms));
    assert(jaPlatforms.length < enPlatforms.length);
  });

  it('should handle hook length limits correctly', () => {
    const longHook = 'A'.repeat(500); // Very long hook
    
    const twitterOptimized = SocialMediaService.optimizeForPlatform(longHook, 'twitter', 'en-US', 'daily-news');
    const linkedinOptimized = SocialMediaService.optimizeForPlatform(longHook, 'linkedin', 'en-US', 'daily-news');
    
    assert(twitterOptimized.length <= 280);
    assert(linkedinOptimized.length <= 3000);
  });
});