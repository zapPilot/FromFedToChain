// Mocks generated by Mockito 5.4.6 from annotations
// in from_fed_to_chain_app/test/helpers/service_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i9;

import 'package:from_fed_to_chain_app/models/audio_content.dart' as _i11;
import 'package:from_fed_to_chain_app/models/audio_file.dart' as _i8;
import 'package:from_fed_to_chain_app/services/audio_service.dart' as _i5;
import 'package:from_fed_to_chain_app/services/auth/auth_service.dart' as _i12;
import 'package:from_fed_to_chain_app/services/content_service.dart' as _i10;
import 'package:from_fed_to_chain_app/services/deep_link_service.dart' as _i3;
import 'package:from_fed_to_chain_app/services/navigation_service.dart' as _i2;
import 'package:from_fed_to_chain_app/services/streaming_api_service.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDuration_0 extends _i1.SmartFake implements Duration {
  _FakeDuration_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i2.NavigationService {
  MockNavigationService() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [DeepLinkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeepLinkService extends _i1.Mock implements _i3.DeepLinkService {
  MockDeepLinkService() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [StreamingApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamingApiService extends _i1.Mock
    implements _i4.StreamingApiService {
  MockStreamingApiService() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [AudioService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioServiceBase extends _i1.Mock implements _i5.AudioService {
  MockAudioServiceBase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.PlaybackState get playbackState => (super.noSuchMethod(
        Invocation.getter(#playbackState),
        returnValue: _i5.PlaybackState.stopped,
      ) as _i5.PlaybackState);

  @override
  Duration get currentPosition => (super.noSuchMethod(
        Invocation.getter(#currentPosition),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#currentPosition),
        ),
      ) as Duration);

  @override
  Duration get totalDuration => (super.noSuchMethod(
        Invocation.getter(#totalDuration),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#totalDuration),
        ),
      ) as Duration);

  @override
  double get playbackSpeed => (super.noSuchMethod(
        Invocation.getter(#playbackSpeed),
        returnValue: 0.0,
      ) as double);

  @override
  bool get autoplayEnabled => (super.noSuchMethod(
        Invocation.getter(#autoplayEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get repeatEnabled => (super.noSuchMethod(
        Invocation.getter(#repeatEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get isPlaying => (super.noSuchMethod(
        Invocation.getter(#isPlaying),
        returnValue: false,
      ) as bool);

  @override
  bool get isPaused => (super.noSuchMethod(
        Invocation.getter(#isPaused),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasError => (super.noSuchMethod(
        Invocation.getter(#hasError),
        returnValue: false,
      ) as bool);

  @override
  bool get isIdle => (super.noSuchMethod(
        Invocation.getter(#isIdle),
        returnValue: false,
      ) as bool);

  @override
  double get progress => (super.noSuchMethod(
        Invocation.getter(#progress),
        returnValue: 0.0,
      ) as double);

  @override
  String get formattedCurrentPosition => (super.noSuchMethod(
        Invocation.getter(#formattedCurrentPosition),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#formattedCurrentPosition),
        ),
      ) as String);

  @override
  String get formattedTotalDuration => (super.noSuchMethod(
        Invocation.getter(#formattedTotalDuration),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#formattedTotalDuration),
        ),
      ) as String);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> playAudio(_i8.AudioFile? audioFile) => (super.noSuchMethod(
        Invocation.method(
          #playAudio,
          [audioFile],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void setAutoplayEnabled(bool? enabled) => super.noSuchMethod(
        Invocation.method(
          #setAutoplayEnabled,
          [enabled],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setRepeatEnabled(bool? enabled) => super.noSuchMethod(
        Invocation.method(
          #setRepeatEnabled,
          [enabled],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> togglePlayPause() => (super.noSuchMethod(
        Invocation.method(
          #togglePlayPause,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> skipToNextEpisode() => (super.noSuchMethod(
        Invocation.method(
          #skipToNextEpisode,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> skipToPreviousEpisode() => (super.noSuchMethod(
        Invocation.method(
          #skipToPreviousEpisode,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> seekTo(Duration? position) => (super.noSuchMethod(
        Invocation.method(
          #seekTo,
          [position],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> skipForward() => (super.noSuchMethod(
        Invocation.method(
          #skipForward,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> skipBackward() => (super.noSuchMethod(
        Invocation.method(
          #skipBackward,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setPlaybackSpeed(double? speed) => (super.noSuchMethod(
        Invocation.method(
          #setPlaybackSpeed,
          [speed],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> testMediaSession() => (super.noSuchMethod(
        Invocation.method(
          #testMediaSession,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ContentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockContentServiceBase extends _i1.Mock implements _i10.ContentService {
  MockContentServiceBase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i8.AudioFile> get allEpisodes => (super.noSuchMethod(
        Invocation.getter(#allEpisodes),
        returnValue: <_i8.AudioFile>[],
      ) as List<_i8.AudioFile>);

  @override
  List<_i8.AudioFile> get filteredEpisodes => (super.noSuchMethod(
        Invocation.getter(#filteredEpisodes),
        returnValue: <_i8.AudioFile>[],
      ) as List<_i8.AudioFile>);

  @override
  String get selectedLanguage => (super.noSuchMethod(
        Invocation.getter(#selectedLanguage),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#selectedLanguage),
        ),
      ) as String);

  @override
  String get selectedCategory => (super.noSuchMethod(
        Invocation.getter(#selectedCategory),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#selectedCategory),
        ),
      ) as String);

  @override
  String get searchQuery => (super.noSuchMethod(
        Invocation.getter(#searchQuery),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#searchQuery),
        ),
      ) as String);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasError => (super.noSuchMethod(
        Invocation.getter(#hasError),
        returnValue: false,
      ) as bool);

  @override
  String get sortOrder => (super.noSuchMethod(
        Invocation.getter(#sortOrder),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#sortOrder),
        ),
      ) as String);

  @override
  Map<String, DateTime> get listenHistory => (super.noSuchMethod(
        Invocation.getter(#listenHistory),
        returnValue: <String, DateTime>{},
      ) as Map<String, DateTime>);

  @override
  bool get hasEpisodes => (super.noSuchMethod(
        Invocation.getter(#hasEpisodes),
        returnValue: false,
      ) as bool);

  @override
  bool get hasFilteredResults => (super.noSuchMethod(
        Invocation.getter(#hasFilteredResults),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  List<_i8.AudioFile> getListenHistoryEpisodes({int? limit = 50}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getListenHistoryEpisodes,
          [],
          {#limit: limit},
        ),
        returnValue: <_i8.AudioFile>[],
      ) as List<_i8.AudioFile>);

  @override
  double getEpisodeCompletion(String? episodeId) => (super.noSuchMethod(
        Invocation.method(
          #getEpisodeCompletion,
          [episodeId],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  bool isEpisodeFinished(String? episodeId) => (super.noSuchMethod(
        Invocation.method(
          #isEpisodeFinished,
          [episodeId],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isEpisodeUnfinished(String? episodeId) => (super.noSuchMethod(
        Invocation.method(
          #isEpisodeUnfinished,
          [episodeId],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> addToListenHistory(
    _i8.AudioFile? episode, {
    DateTime? at,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToListenHistory,
          [episode],
          {#at: at},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> removeFromListenHistory(String? episodeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromListenHistory,
          [episodeId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> clearListenHistory() => (super.noSuchMethod(
        Invocation.method(
          #clearListenHistory,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i11.AudioContent?> fetchContentById(
    String? id,
    String? language,
    String? category,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchContentById,
          [
            id,
            language,
            category,
          ],
        ),
        returnValue: _i7.Future<_i11.AudioContent?>.value(),
      ) as _i7.Future<_i11.AudioContent?>);

  @override
  _i7.Future<_i11.AudioContent?> getContentForAudioFile(
          _i8.AudioFile? audioFile) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContentForAudioFile,
          [audioFile],
        ),
        returnValue: _i7.Future<_i11.AudioContent?>.value(),
      ) as _i7.Future<_i11.AudioContent?>);

  @override
  _i11.AudioContent? getCachedContent(
    String? id,
    String? language,
    String? category,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #getCachedContent,
        [
          id,
          language,
          category,
        ],
      )) as _i11.AudioContent?);

  @override
  _i7.Future<_i8.AudioFile?> getAudioFileById(String? contentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAudioFileById,
          [contentId],
        ),
        returnValue: _i7.Future<_i8.AudioFile?>.value(),
      ) as _i7.Future<_i8.AudioFile?>);

  @override
  _i7.Future<void> prefetchContent(List<_i8.AudioFile>? audioFiles) =>
      (super.noSuchMethod(
        Invocation.method(
          #prefetchContent,
          [audioFiles],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void clearContentCache() => super.noSuchMethod(
        Invocation.method(
          #clearContentCache,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> updateEpisodeCompletion(
    String? episodeId,
    double? completion,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEpisodeCompletion,
          [
            episodeId,
            completion,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> markEpisodeAsFinished(String? episodeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #markEpisodeAsFinished,
          [episodeId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  List<_i8.AudioFile> getUnfinishedEpisodes() => (super.noSuchMethod(
        Invocation.method(
          #getUnfinishedEpisodes,
          [],
        ),
        returnValue: <_i8.AudioFile>[],
      ) as List<_i8.AudioFile>);

  @override
  _i7.Future<void> setSortOrder(String? sortOrder) => (super.noSuchMethod(
        Invocation.method(
          #setSortOrder,
          [sortOrder],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> loadAllEpisodes() => (super.noSuchMethod(
        Invocation.method(
          #loadAllEpisodes,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> loadEpisodesForLanguage(String? language) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadEpisodesForLanguage,
          [language],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setLanguage(String? language) => (super.noSuchMethod(
        Invocation.method(
          #setLanguage,
          [language],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setCategory(String? category) => (super.noSuchMethod(
        Invocation.method(
          #setCategory,
          [category],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void setSearchQuery(String? query) => super.noSuchMethod(
        Invocation.method(
          #setSearchQuery,
          [query],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void createPlaylistFromFiltered(String? name) => super.noSuchMethod(
        Invocation.method(
          #createPlaylistFromFiltered,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void createPlaylist(
    String? name,
    List<_i8.AudioFile>? episodes,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #createPlaylist,
          [
            name,
            episodes,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addToCurrentPlaylist(_i8.AudioFile? episode) => super.noSuchMethod(
        Invocation.method(
          #addToCurrentPlaylist,
          [episode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeFromCurrentPlaylist(_i8.AudioFile? episode) => super.noSuchMethod(
        Invocation.method(
          #removeFromCurrentPlaylist,
          [episode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.AudioFile? getNextEpisode(_i8.AudioFile? currentEpisode) =>
      (super.noSuchMethod(Invocation.method(
        #getNextEpisode,
        [currentEpisode],
      )) as _i8.AudioFile?);

  @override
  _i8.AudioFile? getPreviousEpisode(_i8.AudioFile? currentEpisode) =>
      (super.noSuchMethod(Invocation.method(
        #getPreviousEpisode,
        [currentEpisode],
      )) as _i8.AudioFile?);

  @override
  List<_i8.AudioFile> getEpisodesByLanguage(String? language) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEpisodesByLanguage,
          [language],
        ),
        returnValue: <_i8.AudioFile>[],
      ) as List<_i8.AudioFile>);

  @override
  List<_i8.AudioFile> getEpisodesByCategory(String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEpisodesByCategory,
          [category],
        ),
        returnValue: <_i8.AudioFile>[],
      ) as List<_i8.AudioFile>);

  @override
  List<_i8.AudioFile> getEpisodesByLanguageAndCategory(
    String? language,
    String? category,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEpisodesByLanguageAndCategory,
          [
            language,
            category,
          ],
        ),
        returnValue: <_i8.AudioFile>[],
      ) as List<_i8.AudioFile>);

  @override
  Map<String, dynamic> getStatistics() => (super.noSuchMethod(
        Invocation.method(
          #getStatistics,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i7.Future<void> refresh() => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<List<_i8.AudioFile>> searchEpisodes(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchEpisodes,
          [query],
        ),
        returnValue: _i7.Future<List<_i8.AudioFile>>.value(<_i8.AudioFile>[]),
      ) as _i7.Future<List<_i8.AudioFile>>);

  @override
  Map<String, dynamic> getDebugInfo(_i8.AudioFile? audioFile) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDebugInfo,
          [audioFile],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthServiceBase extends _i1.Mock implements _i12.AuthService {
  MockAuthServiceBase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.AuthState get authState => (super.noSuchMethod(
        Invocation.getter(#authState),
        returnValue: _i12.AuthState.initial,
      ) as _i12.AuthState);

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<bool> signInWithApple() => (super.noSuchMethod(
        Invocation.method(
          #signInWithApple,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<bool> deleteAccount() => (super.noSuchMethod(
        Invocation.method(
          #deleteAccount,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> updateProfile({
    String? name,
    String? photoUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [],
          {
            #name: name,
            #photoUrl: photoUrl,
          },
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
