// Mocks generated by Mockito 5.4.6 from annotations
// in from_fed_to_chain_app/test/services/background_audio_handler_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:audio_service/audio_service.dart' as _i9;
import 'package:audio_session/audio_session.dart' as _i6;
import 'package:from_fed_to_chain_app/models/audio_file.dart' as _i8;
import 'package:from_fed_to_chain_app/services/background_audio_handler.dart'
    as _i7;
import 'package:just_audio/just_audio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:rxdart/rxdart.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePlaybackEvent_0 extends _i1.SmartFake implements _i2.PlaybackEvent {
  _FakePlaybackEvent_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_1 extends _i1.SmartFake implements Duration {
  _FakeDuration_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlayerState_2 extends _i1.SmartFake implements _i2.PlayerState {
  _FakePlayerState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBehaviorSubject_3<T> extends _i1.SmartFake
    implements _i3.BehaviorSubject<T> {
  _FakeBehaviorSubject_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePublishSubject_4<T> extends _i1.SmartFake
    implements _i3.PublishSubject<T> {
  _FakePublishSubject_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValueStream_5<T> extends _i1.SmartFake
    implements _i3.ValueStream<T> {
  _FakeValueStream_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AudioPlayer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioPlayer extends _i1.Mock implements _i2.AudioPlayer {
  MockAudioPlayer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PlaybackEvent get playbackEvent => (super.noSuchMethod(
        Invocation.getter(#playbackEvent),
        returnValue: _FakePlaybackEvent_0(
          this,
          Invocation.getter(#playbackEvent),
        ),
      ) as _i2.PlaybackEvent);

  @override
  _i4.Stream<_i2.PlaybackEvent> get playbackEventStream => (super.noSuchMethod(
        Invocation.getter(#playbackEventStream),
        returnValue: _i4.Stream<_i2.PlaybackEvent>.empty(),
      ) as _i4.Stream<_i2.PlaybackEvent>);

  @override
  _i4.Stream<Duration?> get durationStream => (super.noSuchMethod(
        Invocation.getter(#durationStream),
        returnValue: _i4.Stream<Duration?>.empty(),
      ) as _i4.Stream<Duration?>);

  @override
  _i2.ProcessingState get processingState => (super.noSuchMethod(
        Invocation.getter(#processingState),
        returnValue: _i2.ProcessingState.idle,
      ) as _i2.ProcessingState);

  @override
  _i4.Stream<_i2.ProcessingState> get processingStateStream =>
      (super.noSuchMethod(
        Invocation.getter(#processingStateStream),
        returnValue: _i4.Stream<_i2.ProcessingState>.empty(),
      ) as _i4.Stream<_i2.ProcessingState>);

  @override
  bool get playing => (super.noSuchMethod(
        Invocation.getter(#playing),
        returnValue: false,
      ) as bool);

  @override
  _i4.Stream<bool> get playingStream => (super.noSuchMethod(
        Invocation.getter(#playingStream),
        returnValue: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);

  @override
  double get volume => (super.noSuchMethod(
        Invocation.getter(#volume),
        returnValue: 0.0,
      ) as double);

  @override
  _i4.Stream<double> get volumeStream => (super.noSuchMethod(
        Invocation.getter(#volumeStream),
        returnValue: _i4.Stream<double>.empty(),
      ) as _i4.Stream<double>);

  @override
  double get speed => (super.noSuchMethod(
        Invocation.getter(#speed),
        returnValue: 0.0,
      ) as double);

  @override
  _i4.Stream<double> get speedStream => (super.noSuchMethod(
        Invocation.getter(#speedStream),
        returnValue: _i4.Stream<double>.empty(),
      ) as _i4.Stream<double>);

  @override
  double get pitch => (super.noSuchMethod(
        Invocation.getter(#pitch),
        returnValue: 0.0,
      ) as double);

  @override
  _i4.Stream<double> get pitchStream => (super.noSuchMethod(
        Invocation.getter(#pitchStream),
        returnValue: _i4.Stream<double>.empty(),
      ) as _i4.Stream<double>);

  @override
  bool get skipSilenceEnabled => (super.noSuchMethod(
        Invocation.getter(#skipSilenceEnabled),
        returnValue: false,
      ) as bool);

  @override
  _i4.Stream<bool> get skipSilenceEnabledStream => (super.noSuchMethod(
        Invocation.getter(#skipSilenceEnabledStream),
        returnValue: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);

  @override
  Duration get bufferedPosition => (super.noSuchMethod(
        Invocation.getter(#bufferedPosition),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#bufferedPosition),
        ),
      ) as Duration);

  @override
  _i4.Stream<Duration> get bufferedPositionStream => (super.noSuchMethod(
        Invocation.getter(#bufferedPositionStream),
        returnValue: _i4.Stream<Duration>.empty(),
      ) as _i4.Stream<Duration>);

  @override
  _i4.Stream<_i2.IcyMetadata?> get icyMetadataStream => (super.noSuchMethod(
        Invocation.getter(#icyMetadataStream),
        returnValue: _i4.Stream<_i2.IcyMetadata?>.empty(),
      ) as _i4.Stream<_i2.IcyMetadata?>);

  @override
  _i2.PlayerState get playerState => (super.noSuchMethod(
        Invocation.getter(#playerState),
        returnValue: _FakePlayerState_2(
          this,
          Invocation.getter(#playerState),
        ),
      ) as _i2.PlayerState);

  @override
  _i4.Stream<_i2.PlayerState> get playerStateStream => (super.noSuchMethod(
        Invocation.getter(#playerStateStream),
        returnValue: _i4.Stream<_i2.PlayerState>.empty(),
      ) as _i4.Stream<_i2.PlayerState>);

  @override
  _i4.Stream<List<_i2.IndexedAudioSource>?> get sequenceStream =>
      (super.noSuchMethod(
        Invocation.getter(#sequenceStream),
        returnValue: _i4.Stream<List<_i2.IndexedAudioSource>?>.empty(),
      ) as _i4.Stream<List<_i2.IndexedAudioSource>?>);

  @override
  _i4.Stream<List<int>?> get shuffleIndicesStream => (super.noSuchMethod(
        Invocation.getter(#shuffleIndicesStream),
        returnValue: _i4.Stream<List<int>?>.empty(),
      ) as _i4.Stream<List<int>?>);

  @override
  _i4.Stream<int?> get currentIndexStream => (super.noSuchMethod(
        Invocation.getter(#currentIndexStream),
        returnValue: _i4.Stream<int?>.empty(),
      ) as _i4.Stream<int?>);

  @override
  _i4.Stream<_i2.SequenceState?> get sequenceStateStream => (super.noSuchMethod(
        Invocation.getter(#sequenceStateStream),
        returnValue: _i4.Stream<_i2.SequenceState?>.empty(),
      ) as _i4.Stream<_i2.SequenceState?>);

  @override
  bool get hasNext => (super.noSuchMethod(
        Invocation.getter(#hasNext),
        returnValue: false,
      ) as bool);

  @override
  bool get hasPrevious => (super.noSuchMethod(
        Invocation.getter(#hasPrevious),
        returnValue: false,
      ) as bool);

  @override
  _i2.LoopMode get loopMode => (super.noSuchMethod(
        Invocation.getter(#loopMode),
        returnValue: _i2.LoopMode.off,
      ) as _i2.LoopMode);

  @override
  _i4.Stream<_i2.LoopMode> get loopModeStream => (super.noSuchMethod(
        Invocation.getter(#loopModeStream),
        returnValue: _i4.Stream<_i2.LoopMode>.empty(),
      ) as _i4.Stream<_i2.LoopMode>);

  @override
  bool get shuffleModeEnabled => (super.noSuchMethod(
        Invocation.getter(#shuffleModeEnabled),
        returnValue: false,
      ) as bool);

  @override
  _i4.Stream<bool> get shuffleModeEnabledStream => (super.noSuchMethod(
        Invocation.getter(#shuffleModeEnabledStream),
        returnValue: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);

  @override
  _i4.Stream<int?> get androidAudioSessionIdStream => (super.noSuchMethod(
        Invocation.getter(#androidAudioSessionIdStream),
        returnValue: _i4.Stream<int?>.empty(),
      ) as _i4.Stream<int?>);

  @override
  _i4.Stream<_i2.PositionDiscontinuity> get positionDiscontinuityStream =>
      (super.noSuchMethod(
        Invocation.getter(#positionDiscontinuityStream),
        returnValue: _i4.Stream<_i2.PositionDiscontinuity>.empty(),
      ) as _i4.Stream<_i2.PositionDiscontinuity>);

  @override
  bool get automaticallyWaitsToMinimizeStalling => (super.noSuchMethod(
        Invocation.getter(#automaticallyWaitsToMinimizeStalling),
        returnValue: false,
      ) as bool);

  @override
  bool get canUseNetworkResourcesForLiveStreamingWhilePaused =>
      (super.noSuchMethod(
        Invocation.getter(#canUseNetworkResourcesForLiveStreamingWhilePaused),
        returnValue: false,
      ) as bool);

  @override
  double get preferredPeakBitRate => (super.noSuchMethod(
        Invocation.getter(#preferredPeakBitRate),
        returnValue: 0.0,
      ) as double);

  @override
  bool get allowsExternalPlayback => (super.noSuchMethod(
        Invocation.getter(#allowsExternalPlayback),
        returnValue: false,
      ) as bool);

  @override
  String get webSinkId => (super.noSuchMethod(
        Invocation.getter(#webSinkId),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#webSinkId),
        ),
      ) as String);

  @override
  Duration get position => (super.noSuchMethod(
        Invocation.getter(#position),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#position),
        ),
      ) as Duration);

  @override
  _i4.Stream<Duration> get positionStream => (super.noSuchMethod(
        Invocation.getter(#positionStream),
        returnValue: _i4.Stream<Duration>.empty(),
      ) as _i4.Stream<Duration>);

  @override
  _i4.Stream<Duration> createPositionStream({
    int? steps = 800,
    Duration? minPeriod = const Duration(milliseconds: 200),
    Duration? maxPeriod = const Duration(milliseconds: 200),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPositionStream,
          [],
          {
            #steps: steps,
            #minPeriod: minPeriod,
            #maxPeriod: maxPeriod,
          },
        ),
        returnValue: _i4.Stream<Duration>.empty(),
      ) as _i4.Stream<Duration>);

  @override
  _i4.Future<Duration?> setUrl(
    String? url, {
    Map<String, String>? headers,
    Duration? initialPosition,
    bool? preload = true,
    dynamic tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUrl,
          [url],
          {
            #headers: headers,
            #initialPosition: initialPosition,
            #preload: preload,
            #tag: tag,
          },
        ),
        returnValue: _i4.Future<Duration?>.value(),
      ) as _i4.Future<Duration?>);

  @override
  _i4.Future<Duration?> setFilePath(
    String? filePath, {
    Duration? initialPosition,
    bool? preload = true,
    dynamic tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setFilePath,
          [filePath],
          {
            #initialPosition: initialPosition,
            #preload: preload,
            #tag: tag,
          },
        ),
        returnValue: _i4.Future<Duration?>.value(),
      ) as _i4.Future<Duration?>);

  @override
  _i4.Future<Duration?> setAsset(
    String? assetPath, {
    String? package,
    bool? preload = true,
    Duration? initialPosition,
    dynamic tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAsset,
          [assetPath],
          {
            #package: package,
            #preload: preload,
            #initialPosition: initialPosition,
            #tag: tag,
          },
        ),
        returnValue: _i4.Future<Duration?>.value(),
      ) as _i4.Future<Duration?>);

  @override
  _i4.Future<Duration?> setAudioSource(
    _i2.AudioSource? source, {
    bool? preload = true,
    int? initialIndex,
    Duration? initialPosition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAudioSource,
          [source],
          {
            #preload: preload,
            #initialIndex: initialIndex,
            #initialPosition: initialPosition,
          },
        ),
        returnValue: _i4.Future<Duration?>.value(),
      ) as _i4.Future<Duration?>);

  @override
  _i4.Future<Duration?> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: _i4.Future<Duration?>.value(),
      ) as _i4.Future<Duration?>);

  @override
  _i4.Future<Duration?> setClip({
    Duration? start,
    Duration? end,
    dynamic tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setClip,
          [],
          {
            #start: start,
            #end: end,
            #tag: tag,
          },
        ),
        returnValue: _i4.Future<Duration?>.value(),
      ) as _i4.Future<Duration?>);

  @override
  _i4.Future<void> play() => (super.noSuchMethod(
        Invocation.method(
          #play,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setVolume(double? volume) => (super.noSuchMethod(
        Invocation.method(
          #setVolume,
          [volume],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setSkipSilenceEnabled(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setSkipSilenceEnabled,
          [enabled],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setSpeed(double? speed) => (super.noSuchMethod(
        Invocation.method(
          #setSpeed,
          [speed],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setPitch(double? pitch) => (super.noSuchMethod(
        Invocation.method(
          #setPitch,
          [pitch],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setLoopMode(_i2.LoopMode? mode) => (super.noSuchMethod(
        Invocation.method(
          #setLoopMode,
          [mode],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setShuffleModeEnabled(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setShuffleModeEnabled,
          [enabled],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> shuffle() => (super.noSuchMethod(
        Invocation.method(
          #shuffle,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setAutomaticallyWaitsToMinimizeStalling(
          bool? automaticallyWaitsToMinimizeStalling) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAutomaticallyWaitsToMinimizeStalling,
          [automaticallyWaitsToMinimizeStalling],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setCanUseNetworkResourcesForLiveStreamingWhilePaused(
          bool? canUseNetworkResourcesForLiveStreamingWhilePaused) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCanUseNetworkResourcesForLiveStreamingWhilePaused,
          [canUseNetworkResourcesForLiveStreamingWhilePaused],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setPreferredPeakBitRate(double? preferredPeakBitRate) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPreferredPeakBitRate,
          [preferredPeakBitRate],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setAllowsExternalPlayback(bool? allowsExternalPlayback) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAllowsExternalPlayback,
          [allowsExternalPlayback],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> seek(
    Duration? position, {
    int? index,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #seek,
          [position],
          {#index: index},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> seekToNext() => (super.noSuchMethod(
        Invocation.method(
          #seekToNext,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> seekToPrevious() => (super.noSuchMethod(
        Invocation.method(
          #seekToPrevious,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setAndroidAudioAttributes(
          _i6.AndroidAudioAttributes? audioAttributes) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAndroidAudioAttributes,
          [audioAttributes],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setWebCrossOrigin(_i2.WebCrossOrigin? webCrossOrigin) =>
      (super.noSuchMethod(
        Invocation.method(
          #setWebCrossOrigin,
          [webCrossOrigin],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setWebSinkId(String? webSinkId) => (super.noSuchMethod(
        Invocation.method(
          #setWebSinkId,
          [webSinkId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [AudioSession].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioSession extends _i1.Mock implements _i6.AudioSession {
  MockAudioSession() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i6.AudioSessionConfiguration> get configurationStream =>
      (super.noSuchMethod(
        Invocation.getter(#configurationStream),
        returnValue: _i4.Stream<_i6.AudioSessionConfiguration>.empty(),
      ) as _i4.Stream<_i6.AudioSessionConfiguration>);

  @override
  bool get isConfigured => (super.noSuchMethod(
        Invocation.getter(#isConfigured),
        returnValue: false,
      ) as bool);

  @override
  _i4.Stream<_i6.AudioInterruptionEvent> get interruptionEventStream =>
      (super.noSuchMethod(
        Invocation.getter(#interruptionEventStream),
        returnValue: _i4.Stream<_i6.AudioInterruptionEvent>.empty(),
      ) as _i4.Stream<_i6.AudioInterruptionEvent>);

  @override
  _i4.Stream<void> get becomingNoisyEventStream => (super.noSuchMethod(
        Invocation.getter(#becomingNoisyEventStream),
        returnValue: _i4.Stream<void>.empty(),
      ) as _i4.Stream<void>);

  @override
  _i4.Stream<_i6.AudioDevicesChangedEvent> get devicesChangedEventStream =>
      (super.noSuchMethod(
        Invocation.getter(#devicesChangedEventStream),
        returnValue: _i4.Stream<_i6.AudioDevicesChangedEvent>.empty(),
      ) as _i4.Stream<_i6.AudioDevicesChangedEvent>);

  @override
  _i4.Stream<Set<_i6.AudioDevice>> get devicesStream => (super.noSuchMethod(
        Invocation.getter(#devicesStream),
        returnValue: _i4.Stream<Set<_i6.AudioDevice>>.empty(),
      ) as _i4.Stream<Set<_i6.AudioDevice>>);

  @override
  _i4.Future<void> configure(_i6.AudioSessionConfiguration? configuration) =>
      (super.noSuchMethod(
        Invocation.method(
          #configure,
          [configuration],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> setActive(
    bool? active, {
    _i6.AVAudioSessionSetActiveOptions? avAudioSessionSetActiveOptions,
    _i6.AndroidAudioFocusGainType? androidAudioFocusGainType,
    _i6.AndroidAudioAttributes? androidAudioAttributes,
    bool? androidWillPauseWhenDucked,
    _i6.AudioSessionConfiguration? fallbackConfiguration =
        const _i6.AudioSessionConfiguration.music(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setActive,
          [active],
          {
            #avAudioSessionSetActiveOptions: avAudioSessionSetActiveOptions,
            #androidAudioFocusGainType: androidAudioFocusGainType,
            #androidAudioAttributes: androidAudioAttributes,
            #androidWillPauseWhenDucked: androidWillPauseWhenDucked,
            #fallbackConfiguration: fallbackConfiguration,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<Set<_i6.AudioDevice>> getDevices({
    bool? includeInputs = true,
    bool? includeOutputs = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDevices,
          [],
          {
            #includeInputs: includeInputs,
            #includeOutputs: includeOutputs,
          },
        ),
        returnValue:
            _i4.Future<Set<_i6.AudioDevice>>.value(<_i6.AudioDevice>{}),
      ) as _i4.Future<Set<_i6.AudioDevice>>);
}

/// A class which mocks [BackgroundAudioHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackgroundAudioHandler extends _i1.Mock
    implements _i7.BackgroundAudioHandler {
  MockBackgroundAudioHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get duration => (super.noSuchMethod(
        Invocation.getter(#duration),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#duration),
        ),
      ) as Duration);

  @override
  set onSkipToNextEpisode(
          dynamic Function(_i8.AudioFile)? _onSkipToNextEpisode) =>
      super.noSuchMethod(
        Invocation.setter(
          #onSkipToNextEpisode,
          _onSkipToNextEpisode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onSkipToPreviousEpisode(
          dynamic Function(_i8.AudioFile)? _onSkipToPreviousEpisode) =>
      super.noSuchMethod(
        Invocation.setter(
          #onSkipToPreviousEpisode,
          _onSkipToPreviousEpisode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.BehaviorSubject<_i9.PlaybackState> get playbackState =>
      (super.noSuchMethod(
        Invocation.getter(#playbackState),
        returnValue: _FakeBehaviorSubject_3<_i9.PlaybackState>(
          this,
          Invocation.getter(#playbackState),
        ),
      ) as _i3.BehaviorSubject<_i9.PlaybackState>);

  @override
  _i3.BehaviorSubject<List<_i9.MediaItem>> get queue => (super.noSuchMethod(
        Invocation.getter(#queue),
        returnValue: _FakeBehaviorSubject_3<List<_i9.MediaItem>>(
          this,
          Invocation.getter(#queue),
        ),
      ) as _i3.BehaviorSubject<List<_i9.MediaItem>>);

  @override
  _i3.BehaviorSubject<String> get queueTitle => (super.noSuchMethod(
        Invocation.getter(#queueTitle),
        returnValue: _FakeBehaviorSubject_3<String>(
          this,
          Invocation.getter(#queueTitle),
        ),
      ) as _i3.BehaviorSubject<String>);

  @override
  _i3.BehaviorSubject<_i9.MediaItem?> get mediaItem => (super.noSuchMethod(
        Invocation.getter(#mediaItem),
        returnValue: _FakeBehaviorSubject_3<_i9.MediaItem?>(
          this,
          Invocation.getter(#mediaItem),
        ),
      ) as _i3.BehaviorSubject<_i9.MediaItem?>);

  @override
  _i3.BehaviorSubject<_i9.AndroidPlaybackInfo> get androidPlaybackInfo =>
      (super.noSuchMethod(
        Invocation.getter(#androidPlaybackInfo),
        returnValue: _FakeBehaviorSubject_3<_i9.AndroidPlaybackInfo>(
          this,
          Invocation.getter(#androidPlaybackInfo),
        ),
      ) as _i3.BehaviorSubject<_i9.AndroidPlaybackInfo>);

  @override
  _i3.BehaviorSubject<_i9.RatingStyle> get ratingStyle => (super.noSuchMethod(
        Invocation.getter(#ratingStyle),
        returnValue: _FakeBehaviorSubject_3<_i9.RatingStyle>(
          this,
          Invocation.getter(#ratingStyle),
        ),
      ) as _i3.BehaviorSubject<_i9.RatingStyle>);

  @override
  _i3.PublishSubject<dynamic> get customEvent => (super.noSuchMethod(
        Invocation.getter(#customEvent),
        returnValue: _FakePublishSubject_4<dynamic>(
          this,
          Invocation.getter(#customEvent),
        ),
      ) as _i3.PublishSubject<dynamic>);

  @override
  _i3.BehaviorSubject<dynamic> get customState => (super.noSuchMethod(
        Invocation.getter(#customState),
        returnValue: _FakeBehaviorSubject_3<dynamic>(
          this,
          Invocation.getter(#customState),
        ),
      ) as _i3.BehaviorSubject<dynamic>);

  @override
  void setEpisodeNavigationCallbacks({
    required dynamic Function(_i8.AudioFile)? onNext,
    required dynamic Function(_i8.AudioFile)? onPrevious,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setEpisodeNavigationCallbacks,
          [],
          {
            #onNext: onNext,
            #onPrevious: onPrevious,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> setAudioSource(
    String? url, {
    required String? title,
    String? artist,
    Duration? initialPosition,
    _i8.AudioFile? audioFile,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAudioSource,
          [url],
          {
            #title: title,
            #artist: artist,
            #initialPosition: initialPosition,
            #audioFile: audioFile,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> play() => (super.noSuchMethod(
        Invocation.method(
          #play,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> seek(Duration? position) => (super.noSuchMethod(
        Invocation.method(
          #seek,
          [position],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> skipToNext() => (super.noSuchMethod(
        Invocation.method(
          #skipToNext,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> skipToPrevious() => (super.noSuchMethod(
        Invocation.method(
          #skipToPrevious,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> fastForward() => (super.noSuchMethod(
        Invocation.method(
          #fastForward,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> rewind() => (super.noSuchMethod(
        Invocation.method(
          #rewind,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<dynamic> customAction(
    String? name, [
    Map<String, dynamic>? extras,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #customAction,
          [
            name,
            extras,
          ],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<void> testMediaSession() => (super.noSuchMethod(
        Invocation.method(
          #testMediaSession,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> onTaskRemoved() => (super.noSuchMethod(
        Invocation.method(
          #onTaskRemoved,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> prepare() => (super.noSuchMethod(
        Invocation.method(
          #prepare,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> prepareFromMediaId(
    String? mediaId, [
    Map<String, dynamic>? extras,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #prepareFromMediaId,
          [
            mediaId,
            extras,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> prepareFromSearch(
    String? query, [
    Map<String, dynamic>? extras,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #prepareFromSearch,
          [
            query,
            extras,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> prepareFromUri(
    Uri? uri, [
    Map<String, dynamic>? extras,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #prepareFromUri,
          [
            uri,
            extras,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> playFromMediaId(
    String? mediaId, [
    Map<String, dynamic>? extras,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #playFromMediaId,
          [
            mediaId,
            extras,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> playFromSearch(
    String? query, [
    Map<String, dynamic>? extras,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #playFromSearch,
          [
            query,
            extras,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> playFromUri(
    Uri? uri, [
    Map<String, dynamic>? extras,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #playFromUri,
          [
            uri,
            extras,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> playMediaItem(_i9.MediaItem? mediaItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #playMediaItem,
          [mediaItem],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> click([_i9.MediaButton? button = _i9.MediaButton.media]) =>
      (super.noSuchMethod(
        Invocation.method(
          #click,
          [button],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addQueueItem(_i9.MediaItem? mediaItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #addQueueItem,
          [mediaItem],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addQueueItems(List<_i9.MediaItem>? mediaItems) =>
      (super.noSuchMethod(
        Invocation.method(
          #addQueueItems,
          [mediaItems],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> insertQueueItem(
    int? index,
    _i9.MediaItem? mediaItem,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertQueueItem,
          [
            index,
            mediaItem,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateQueue(List<_i9.MediaItem>? queue) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateQueue,
          [queue],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateMediaItem(_i9.MediaItem? mediaItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMediaItem,
          [mediaItem],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeQueueItem(_i9.MediaItem? mediaItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeQueueItem,
          [mediaItem],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeQueueItemAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #removeQueueItemAt,
          [index],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> skipToQueueItem(int? index) => (super.noSuchMethod(
        Invocation.method(
          #skipToQueueItem,
          [index],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setRating(
    _i9.Rating? rating, [
    Map<String, dynamic>? extras,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #setRating,
          [
            rating,
            extras,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setCaptioningEnabled(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setCaptioningEnabled,
          [enabled],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setRepeatMode(_i9.AudioServiceRepeatMode? repeatMode) =>
      (super.noSuchMethod(
        Invocation.method(
          #setRepeatMode,
          [repeatMode],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setShuffleMode(_i9.AudioServiceShuffleMode? shuffleMode) =>
      (super.noSuchMethod(
        Invocation.method(
          #setShuffleMode,
          [shuffleMode],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> seekBackward(bool? begin) => (super.noSuchMethod(
        Invocation.method(
          #seekBackward,
          [begin],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> seekForward(bool? begin) => (super.noSuchMethod(
        Invocation.method(
          #seekForward,
          [begin],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setSpeed(double? speed) => (super.noSuchMethod(
        Invocation.method(
          #setSpeed,
          [speed],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> onNotificationDeleted() => (super.noSuchMethod(
        Invocation.method(
          #onNotificationDeleted,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i9.MediaItem>> getChildren(
    String? parentMediaId, [
    Map<String, dynamic>? options,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChildren,
          [
            parentMediaId,
            options,
          ],
        ),
        returnValue: _i4.Future<List<_i9.MediaItem>>.value(<_i9.MediaItem>[]),
      ) as _i4.Future<List<_i9.MediaItem>>);

  @override
  _i3.ValueStream<Map<String, dynamic>> subscribeToChildren(
          String? parentMediaId) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToChildren,
          [parentMediaId],
        ),
        returnValue: _FakeValueStream_5<Map<String, dynamic>>(
          this,
          Invocation.method(
            #subscribeToChildren,
            [parentMediaId],
          ),
        ),
      ) as _i3.ValueStream<Map<String, dynamic>>);

  @override
  _i4.Future<_i9.MediaItem?> getMediaItem(String? mediaId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMediaItem,
          [mediaId],
        ),
        returnValue: _i4.Future<_i9.MediaItem?>.value(),
      ) as _i4.Future<_i9.MediaItem?>);

  @override
  _i4.Future<List<_i9.MediaItem>> search(
    String? query, [
    Map<String, dynamic>? extras,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [
            query,
            extras,
          ],
        ),
        returnValue: _i4.Future<List<_i9.MediaItem>>.value(<_i9.MediaItem>[]),
      ) as _i4.Future<List<_i9.MediaItem>>);

  @override
  _i4.Future<void> androidAdjustRemoteVolume(
          _i9.AndroidVolumeDirection? direction) =>
      (super.noSuchMethod(
        Invocation.method(
          #androidAdjustRemoteVolume,
          [direction],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> androidSetRemoteVolume(int? volumeIndex) =>
      (super.noSuchMethod(
        Invocation.method(
          #androidSetRemoteVolume,
          [volumeIndex],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
