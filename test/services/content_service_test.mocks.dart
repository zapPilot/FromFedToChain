// Mocks generated by Mockito 5.4.6 from annotations
// in from_fed_to_chain_audio/test/services/content_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:from_fed_to_chain_audio/services/language_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LanguageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageService extends _i1.Mock implements _i2.LanguageService {
  MockLanguageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<Map<String, String>> get availableLanguages => (super.noSuchMethod(
        Invocation.getter(#availableLanguages),
        returnValue: <Map<String, String>>[],
      ) as List<Map<String, String>>);

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  bool get hasLanguageSelected => (super.noSuchMethod(
        Invocation.getter(#hasLanguageSelected),
        returnValue: false,
      ) as bool);

  @override
  String get currentLanguage => (super.noSuchMethod(
        Invocation.getter(#currentLanguage),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#currentLanguage),
        ),
      ) as String);

  @override
  bool get isFirstLaunch => (super.noSuchMethod(
        Invocation.getter(#isFirstLaunch),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setLanguage(String? languageCode) => (super.noSuchMethod(
        Invocation.method(
          #setLanguage,
          [languageCode],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearLanguage() => (super.noSuchMethod(
        Invocation.method(
          #clearLanguage,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  String getLanguageDisplayName(String? languageCode) => (super.noSuchMethod(
        Invocation.method(
          #getLanguageDisplayName,
          [languageCode],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #getLanguageDisplayName,
            [languageCode],
          ),
        ),
      ) as String);

  @override
  String getLanguageFlag(String? languageCode) => (super.noSuchMethod(
        Invocation.method(
          #getLanguageFlag,
          [languageCode],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #getLanguageFlag,
            [languageCode],
          ),
        ),
      ) as String);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
