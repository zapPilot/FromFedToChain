// Mocks generated by Mockito 5.4.6 from annotations
// in from_fed_to_chain_audio/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i6;

import 'package:from_fed_to_chain_audio/models/audio_content.dart' as _i8;
import 'package:from_fed_to_chain_audio/models/audio_file.dart' as _i5;
import 'package:from_fed_to_chain_audio/services/audio_service.dart' as _i2;
import 'package:from_fed_to_chain_audio/services/auth_service.dart' as _i9;
import 'package:from_fed_to_chain_audio/services/content_service.dart' as _i7;
import 'package:from_fed_to_chain_audio/services/language_service.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDuration_0 extends _i1.SmartFake implements Duration {
  _FakeDuration_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AudioService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioService extends _i1.Mock implements _i2.AudioService {
  MockAudioService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PlaybackState get playbackState => (super.noSuchMethod(
        Invocation.getter(#playbackState),
        returnValue: _i2.PlaybackState.stopped,
      ) as _i2.PlaybackState);

  @override
  Duration get currentPosition => (super.noSuchMethod(
        Invocation.getter(#currentPosition),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#currentPosition),
        ),
      ) as Duration);

  @override
  Duration get totalDuration => (super.noSuchMethod(
        Invocation.getter(#totalDuration),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#totalDuration),
        ),
      ) as Duration);

  @override
  double get playbackSpeed => (super.noSuchMethod(
        Invocation.getter(#playbackSpeed),
        returnValue: 0.0,
      ) as double);

  @override
  bool get autoplayEnabled => (super.noSuchMethod(
        Invocation.getter(#autoplayEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get isPlaying => (super.noSuchMethod(
        Invocation.getter(#isPlaying),
        returnValue: false,
      ) as bool);

  @override
  bool get isPaused => (super.noSuchMethod(
        Invocation.getter(#isPaused),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasError => (super.noSuchMethod(
        Invocation.getter(#hasError),
        returnValue: false,
      ) as bool);

  @override
  bool get isIdle => (super.noSuchMethod(
        Invocation.getter(#isIdle),
        returnValue: false,
      ) as bool);

  @override
  double get progress => (super.noSuchMethod(
        Invocation.getter(#progress),
        returnValue: 0.0,
      ) as double);

  @override
  String get formattedCurrentPosition => (super.noSuchMethod(
        Invocation.getter(#formattedCurrentPosition),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#formattedCurrentPosition),
        ),
      ) as String);

  @override
  String get formattedTotalDuration => (super.noSuchMethod(
        Invocation.getter(#formattedTotalDuration),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#formattedTotalDuration),
        ),
      ) as String);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> playAudio(_i5.AudioFile? audioFile) => (super.noSuchMethod(
        Invocation.method(
          #playAudio,
          [audioFile],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> resume() => (super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> seekTo(Duration? position) => (super.noSuchMethod(
        Invocation.method(
          #seekTo,
          [position],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setPlaybackSpeed(double? speed) => (super.noSuchMethod(
        Invocation.method(
          #setPlaybackSpeed,
          [speed],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> skipForward(
          [Duration? duration = const Duration(seconds: 30)]) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipForward,
          [duration],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> skipBackward(
          [Duration? duration = const Duration(seconds: 10)]) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipBackward,
          [duration],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> togglePlayPause() => (super.noSuchMethod(
        Invocation.method(
          #togglePlayPause,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> switchLanguage(_i5.AudioFile? newLanguageAudioFile) =>
      (super.noSuchMethod(
        Invocation.method(
          #switchLanguage,
          [newLanguageAudioFile],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> seekRelative(int? seconds) => (super.noSuchMethod(
        Invocation.method(
          #seekRelative,
          [seconds],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void setAutoplayEnabled(bool? enabled) => super.noSuchMethod(
        Invocation.method(
          #setAutoplayEnabled,
          [enabled],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ContentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockContentService extends _i1.Mock implements _i7.ContentService {
  MockContentService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i8.AudioContent> get contents => (super.noSuchMethod(
        Invocation.getter(#contents),
        returnValue: <_i8.AudioContent>[],
      ) as List<_i8.AudioContent>);

  @override
  List<_i5.AudioFile> get audioFiles => (super.noSuchMethod(
        Invocation.getter(#audioFiles),
        returnValue: <_i5.AudioFile>[],
      ) as List<_i5.AudioFile>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  String get searchQuery => (super.noSuchMethod(
        Invocation.getter(#searchQuery),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#searchQuery),
        ),
      ) as String);

  @override
  List<String> get availableLanguages => (super.noSuchMethod(
        Invocation.getter(#availableLanguages),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get availableCategories => (super.noSuchMethod(
        Invocation.getter(#availableCategories),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<_i8.AudioContent> get contentsWithAudio => (super.noSuchMethod(
        Invocation.getter(#contentsWithAudio),
        returnValue: <_i8.AudioContent>[],
      ) as List<_i8.AudioContent>);

  @override
  bool get isUsingApiData => (super.noSuchMethod(
        Invocation.getter(#isUsingApiData),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> loadContent() => (super.noSuchMethod(
        Invocation.method(
          #loadContent,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void setLanguageFilter(String? language) => super.noSuchMethod(
        Invocation.method(
          #setLanguageFilter,
          [language],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setCategoryFilter(String? category) => super.noSuchMethod(
        Invocation.method(
          #setCategoryFilter,
          [category],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setSearchQuery(String? query) => super.noSuchMethod(
        Invocation.method(
          #setSearchQuery,
          [query],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearFilters() => super.noSuchMethod(
        Invocation.method(
          #clearFilters,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.AudioContent? getContent(
    String? id,
    String? language,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #getContent,
        [
          id,
          language,
        ],
      )) as _i8.AudioContent?);

  @override
  _i4.Future<_i8.AudioContent?> fetchContentById(
    String? id,
    String? language,
    String? category,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchContentById,
          [
            id,
            language,
            category,
          ],
        ),
        returnValue: _i4.Future<_i8.AudioContent?>.value(),
      ) as _i4.Future<_i8.AudioContent?>);

  @override
  _i4.Future<_i8.AudioContent?> getContentWithFetch(
    String? id,
    String? language,
    String? category,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContentWithFetch,
          [
            id,
            language,
            category,
          ],
        ),
        returnValue: _i4.Future<_i8.AudioContent?>.value(),
      ) as _i4.Future<_i8.AudioContent?>);

  @override
  _i5.AudioFile? getAudioFile(
    String? id,
    String? language,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #getAudioFile,
        [
          id,
          language,
        ],
      )) as _i5.AudioFile?);

  @override
  void setUseApiData(bool? useApi) => super.noSuchMethod(
        Invocation.method(
          #setUseApiData,
          [useApi],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<List<_i5.AudioFile>> getAudioFilesByLanguage(String? language) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAudioFilesByLanguage,
          [language],
        ),
        returnValue: _i4.Future<List<_i5.AudioFile>>.value(<_i5.AudioFile>[]),
      ) as _i4.Future<List<_i5.AudioFile>>);

  @override
  _i5.AudioFile? getNextEpisode(_i5.AudioFile? currentEpisode) =>
      (super.noSuchMethod(Invocation.method(
        #getNextEpisode,
        [currentEpisode],
      )) as _i5.AudioFile?);

  @override
  _i5.AudioFile? getPreviousEpisode(_i5.AudioFile? currentEpisode) =>
      (super.noSuchMethod(Invocation.method(
        #getPreviousEpisode,
        [currentEpisode],
      )) as _i5.AudioFile?);

  @override
  List<_i5.AudioFile> getCurrentLanguageEpisodes() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentLanguageEpisodes,
          [],
        ),
        returnValue: <_i5.AudioFile>[],
      ) as List<_i5.AudioFile>);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i9.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoggedIn => (super.noSuchMethod(
        Invocation.getter(#isLoggedIn),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> checkAuthStatus() => (super.noSuchMethod(
        Invocation.method(
          #checkAuthStatus,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> register(
    String? email,
    String? password,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            email,
            password,
            name,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> resetPassword(String? email) => (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [email],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LanguageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageService extends _i1.Mock implements _i10.LanguageService {
  MockLanguageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<Map<String, String>> get availableLanguages => (super.noSuchMethod(
        Invocation.getter(#availableLanguages),
        returnValue: <Map<String, String>>[],
      ) as List<Map<String, String>>);

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  bool get hasLanguageSelected => (super.noSuchMethod(
        Invocation.getter(#hasLanguageSelected),
        returnValue: false,
      ) as bool);

  @override
  String get currentLanguage => (super.noSuchMethod(
        Invocation.getter(#currentLanguage),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#currentLanguage),
        ),
      ) as String);

  @override
  bool get isFirstLaunch => (super.noSuchMethod(
        Invocation.getter(#isFirstLaunch),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setLanguage(String? languageCode) => (super.noSuchMethod(
        Invocation.method(
          #setLanguage,
          [languageCode],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearLanguage() => (super.noSuchMethod(
        Invocation.method(
          #clearLanguage,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  String getLanguageDisplayName(String? languageCode) => (super.noSuchMethod(
        Invocation.method(
          #getLanguageDisplayName,
          [languageCode],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #getLanguageDisplayName,
            [languageCode],
          ),
        ),
      ) as String);

  @override
  String getLanguageFlag(String? languageCode) => (super.noSuchMethod(
        Invocation.method(
          #getLanguageFlag,
          [languageCode],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #getLanguageFlag,
            [languageCode],
          ),
        ),
      ) as String);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
