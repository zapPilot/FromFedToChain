#!/usr/bin/env sh

# Run lint-staged to format staged files
npx lint-staged

# # Run Flutter analysis and tests for Dart files if any were modified
# if git diff --cached --name-only | grep -q "\.dart$\|pubspec\.yaml$"; then
#   echo "üîç Running Flutter analysis..."
#   # Run flutter analyze and capture output
#   FLUTTER_OUTPUT=$(flutter analyze --no-congratulate 2>&1)
#   FLUTTER_EXIT_CODE=$?
  
#   # Check for actual errors/warnings (not just info)
#   ERROR_COUNT=$(echo "$FLUTTER_OUTPUT" | grep -c "error ‚Ä¢" || true)
#   WARNING_COUNT=$(echo "$FLUTTER_OUTPUT" | grep -c "warning ‚Ä¢" || true)
  
#   # Set to 0 if grep found nothing
#   ERROR_COUNT=${ERROR_COUNT:-0}
#   WARNING_COUNT=${WARNING_COUNT:-0}
  
#   if [[ $ERROR_COUNT -gt 0 ]] || [[ $WARNING_COUNT -gt 0 ]]; then
#     echo "‚ùå Flutter analysis found $ERROR_COUNT errors and $WARNING_COUNT warnings:"
#     echo "$FLUTTER_OUTPUT" | grep -E "(error ‚Ä¢|warning ‚Ä¢)"
#     exit 1
#   fi
  
#   # Show info summary but don't fail
#   INFO_COUNT=$(echo "$FLUTTER_OUTPUT" | grep -c "info ‚Ä¢" || echo "0")
#   if [[ $INFO_COUNT -gt 0 ]]; then
#     echo "‚ÑπÔ∏è Flutter analysis found $INFO_COUNT info-level suggestions (not blocking commit)"
#   fi
  
#   echo "üß™ Running Flutter tests..."
#   if ! flutter test --no-pub --reporter compact; then
#     echo "‚ùå Flutter tests failed. Please fix the failing tests."
#     exit 1
#   fi
  
#   echo "‚úÖ Flutter checks passed!"
# fi